<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Meus Agendamentos - Fresh Muse</title>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap" rel="stylesheet">
  <style>
    
    html, body {
      height: 100%;
      margin: 0;
      font-family: 'Montserrat', sans-serif;
      background: linear-gradient(180deg, #fa746f 30%, #D5605E 100%);
      color: #fff;
    }

    body {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 2rem;
      box-sizing: border-box;
    }

    .logo {
      margin-bottom: 40px;
      text-align: center;
    }

    .logo img {
      max-width: 250px;
    }

    .btn-voltar {
      background-color: #fff;
      color: #D5605E;
      border: 2px solid #D5605E;
      padding: 0.75rem 1.5rem;
      border-radius: 16px;
      font-weight: 700;
      font-size: 1rem;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-block;
      margin-bottom: 1.5rem; 
      align-self: flex-start;
      margin-left: calc(50% - 600px);
      max-width: 1200px;
      width: 100%;
      text-align: left;
    }

    @media (max-width: 1240px) { 
        .btn-voltar {
            margin-left: 2rem; 
            margin-right: 2rem;
        }
    }
    @media (max-width: 768px) {
        .btn-voltar {
            margin-left: 1rem;
            margin-right: 1rem;
            padding: 0.75rem 1rem; 
        }
    }


    .btn-voltar:hover {
      background-color: #D5605E;
      color: white;
    }

    h1 {
      margin-bottom: 2rem;
      font-weight: 700;
      color: #fff;
      text-align: center;
    }

    .agendamentos-container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 1.5rem;
      width: 100%;
      max-width: 1200px;
      padding: 1rem;
    }

    .agendamento-card {
      background: #fff;
      color: #D5605E;
      border-radius: 16px;
      padding: 1.5rem;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      min-height: 200px;
    }

    .agendamento-card h2 {
      margin-top: 0;
      margin-bottom: 0.75rem;
      font-weight: 700;
      color: #fa746f;
      font-size: 1.5rem;
    }

    .agendamento-card p {
      margin-bottom: 0.5rem;
      font-size: 1rem;
      line-height: 1.4;
    }

    .agendamento-card .data-hora {
      font-weight: 600;
      color: #D5605E;
    }

    .agendamento-card .id-cliente, .agendamento-card .preco {
        font-size: 0.95rem;
        color: #666;
    }

    .agendamento-card .btn-cancelar {
      background-color: #D5605E;
      color: white;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-weight: 600;
      font-size: 1rem;
      cursor: pointer;
      transition: background-color 0.3s ease;
      margin-top: 1rem;
      width: 100%;
    }

    .agendamento-card .btn-cancelar:hover {
      background-color: #fa746f;
    }

    .no-agendamentos {
      color: #fff;
      font-size: 1.2rem;
      text-align: center;
      margin-top: 50px;
    }

    @media (max-width: 768px) {
      body {
        padding: 1rem;
      }
      .agendamentos-container {
        grid-template-columns: 1fr;
        padding: 0;
      }
      .logo img {
        max-width: 200px;
      }
      h1 {
        font-size: 1.8rem;
      }
      .agendamento-card {
        padding: 1.2rem;
      }
    }
  </style>
</head>
<body>

  <div class="logo">
    <img src="../assets/fresh_muse_logo.png" alt="Fresh Muse Logo" />
  </div>

  <a href="javascript:history.back()" class="btn-voltar">Voltar</a>

  <h1>Meus Agendamentos</h1>

  <div class="agendamentos-container" id="agendamentosList">
    </div>

  <div id="noAgendamentosMessage" class="no-agendamentos" style="display: none;">
    Você ainda não possui agendamentos.
  </div>

<script>
async function carregarEventos() {
    try {
        const response = await fetch('/api/eventos');
        if (!response.ok) {
            throw new Error('Erro ao buscar eventos');
        }
        
        const eventos = await response.json();
        const containerEventos = document.querySelector('.eventos-container');
        
        if (eventos.length === 0) {
            containerEventos.innerHTML = '<p>Nenhum evento encontrado.</p>';
            return;
        }

        containerEventos.innerHTML = eventos.map(evento => `
            <div class="evento-card">
                <div class="evento-header">
                    <h3>${evento.titulo}</h3>
                    <div class="evento-acoes">
                        <button onclick="editarEvento(${evento.id})" class="btn-editar">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        <button onclick="deletarEvento(${evento.id})" class="btn-deletar">
                            <i class="fas fa-trash"></i> Excluir
                        </button>
                    </div>
                </div>
                <div class="evento-detalhes">
                    <p><strong>Data:</strong> ${formatarData(evento.data)}</p>
                    <p><strong>Descrição:</strong> ${evento.descricao || 'Sem descrição'}</p>
                    <p><strong>Status:</strong> 
                        <span class="${getStatusClass(evento.status)}">
                            ${evento.status}
                        </span>
                    </p>
                </div>
            </div>
        `).join('');
    } catch (error) {
        console.error('Erro:', error);
        mostrarMensagem('Erro ao carregar eventos. Tente novamente.', 'erro');
    }
}

function formatarData(data) {
    return new Date(data).toLocaleDateString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function getStatusClass(status) {
    const statusClasses = {
        'PENDENTE': 'status-pendente',
        'CONFIRMADO': 'status-confirmado',
        'CANCELADO': 'status-cancelado'
    };
    return statusClasses[status] || 'status-pendente';
}

async function deletarEvento(id) {
    if (!confirm('Tem certeza que deseja excluir este evento?')) return;

    try {
        const response = await fetch(`/api/eventos/${id}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error('Erro ao excluir evento');
        }

        mostrarMensagem('Evento excluído com sucesso!', 'sucesso');
        carregarEventos();
    } catch (error) {
        console.error('Erro:', error);
        mostrarMensagem('Erro ao excluir evento. Tente novamente.', 'erro');
    }
}

async function editarEvento(id) {
    try {
        const response = await fetch(`/api/eventos/${id}`);
        if (!response.ok) {
            throw new Error('Erro ao buscar dados do evento');
        }
        
        const evento = await response.json();
        window.location.href = `/eventoEditar/${id}`;
    } catch (error) {
        console.error('Erro:', error);
        mostrarMensagem('Erro ao editar evento. Tente novamente.', 'erro');
    }
}

function mostrarMensagem(texto, tipo) {
    const mensagem = document.getElementById('mensagem');
    mensagem.textContent = texto;
    mensagem.className = `mensagem ${tipo}`;
    mensagem.style.display = 'block';

    setTimeout(() => {
        mensagem.style.display = 'none';
    }, 3000);
}
</script>
</body>
</html>